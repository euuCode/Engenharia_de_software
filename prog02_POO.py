"""
================================================================
 Calculadora Avan√ßada em Python (POO)
 Autor: M√°rcio Ferreira (vers√£o aprimorada)

 Descri√ß√£o:
 -----------
 Calculadora que realiza opera√ß√µes b√°sicas e algumas avan√ßadas:
 - Soma, Subtra√ß√£o, Multiplica√ß√£o, Divis√£o
 - Pot√™ncia, Raiz Quadrada, Porcentagem

 Recursos:
  - Valida√ß√£o de entrada (s√≥ aceita n√∫meros)
  - Tratamento para divis√£o por zero
  - Menu interativo no console
================================================================
"""

from enum import Enum
import math


class Operacao(Enum):
    SOMA = "+"
    SUBTRACAO = "-"
    MULTIPLICACAO = "√ó"
    DIVISAO = "√∑"
    POTENCIA = "^"
    RAIZ = "‚àö"
    PORCENTAGEM = "%"

    def executar(self, a: float, b: float = 0) -> float:
        if self == Operacao.SOMA:
            return a + b
        elif self == Operacao.SUBTRACAO:
            return a - b
        elif self == Operacao.MULTIPLICACAO:
            return a * b
        elif self == Operacao.DIVISAO:
            if b == 0:
                print("‚ö†Ô∏è N√£o d√° pra dividir por zero.")
                return float("nan")
            return a / b
        elif self == Operacao.POTENCIA:
            return math.pow(a, b)
        elif self == Operacao.RAIZ:
            if a < 0:
                print("‚ö†Ô∏è N√£o d√° pra tirar raiz de n√∫mero negativo.")
                return float("nan")
            return math.sqrt(a)
        elif self == Operacao.PORCENTAGEM:
            return (a * b) / 100
        else:
            return float("nan")

    def __str__(self):
        nomes = {
            Operacao.SOMA: "Soma (+)",
            Operacao.SUBTRACAO: "Subtra√ß√£o (-)",
            Operacao.MULTIPLICACAO: "Multiplica√ß√£o (√ó)",
            Operacao.DIVISAO: "Divis√£o (√∑)",
            Operacao.POTENCIA: "Pot√™ncia (^)",
            Operacao.RAIZ: "Raiz Quadrada (‚àö)",
            Operacao.PORCENTAGEM: "Porcentagem (%)",
        }
        return nomes[self]


class Calculadora:
    def __init__(self):
        self.operacoes = {
            "1": Operacao.SOMA,
            "2": Operacao.SUBTRACAO,
            "3": Operacao.MULTIPLICACAO,
            "4": Operacao.DIVISAO,
            "5": Operacao.POTENCIA,
            "6": Operacao.RAIZ,
            "7": Operacao.PORCENTAGEM,
        }

    def exibir_menu(self):
        print("\n=== Calculadora Avan√ßada ===")
        for k, v in self.operacoes.items():
            print(f"{k}Ô∏è‚É£  {v}")
        print("0Ô∏è‚É£  Sair")

    def ler_numero(self, mensagem: str) -> float:
        while True:
            try:
                return float(input(mensagem))
            except ValueError:
                print("‚ö†Ô∏è Entrada inv√°lida! Digite s√≥ n√∫mero.")

    def iniciar(self):
        while True:
            self.exibir_menu()
            escolha = input("Escolha uma op√ß√£o: ")

            if escolha == "0":
                print("üëã Saindo... valeu!")
                break

            operacao = self.operacoes.get(escolha)
            if operacao is None:
                print("‚ö†Ô∏è Op√ß√£o inv√°lida! Tenta de novo.")
                continue

            num1 = self.ler_numero("Digite o primeiro n√∫mero: ")
            num2 = 0

            if operacao != Operacao.RAIZ:
                num2 = self.ler_numero("Digite o segundo n√∫mero: ")

            resultado = operacao.executar(num1, num2)
            if not math.isnan(resultado):
                print(f"‚úÖ Resultado: {resultado:.2f}")


if __name__ == "__main__":
    Calculadora().iniciar()
